{
  "version": 3,
  "sources": ["../../../../node_modules/@byloth/exceptions/src/exceptions/core.ts", "../../../../node_modules/@byloth/exceptions/src/exceptions/index.ts", "../../../../node_modules/@byloth/exceptions/src/models.ts", "../../../../node_modules/@byloth/exceptions/src/index.ts"],
  "sourcesContent": ["export class Exception extends Error\n{\n    public static FromUnknown(error: unknown): Exception\n    {\n        if (error instanceof Exception)\n        {\n            return error;\n        }\n\n        const exc = new Exception(\"\");\n\n        if (error instanceof Error)\n        {\n            exc.message = error.message;\n            exc.stack = error.stack;\n            exc.name = error.name;\n        }\n        else\n        {\n            exc.message = String(error);\n        }\n\n        return exc;\n    }\n\n    public constructor(message: string, cause?: unknown, name = \"Exception\")\n    {\n        super(message);\n\n        this.name = name;\n\n        if (cause)\n        {\n            if (cause instanceof Error)\n            {\n                this.stack += `\\n\\nCaused by ${cause.stack}`;\n            }\n            else\n            {\n                this.stack += `\\n\\nCaused by ${cause}`;\n            }\n        }\n    }\n}\n", "import { Exception } from \"./core.js\";\nexport { Exception };\n\nexport class HandledException extends Exception\n{\n    public readonly handled: Exception;\n\n    public constructor(exc: Exception, name = \"HandledException\")\n    {\n        super(\"The original exception has already been handled.\");\n\n        this.name = name;\n        this.stack += `\\n\\nHandled ${exc.stack}`;\n\n        this.handled = exc;\n    }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Exception, HandledException } from \"./exceptions/index.js\";\nimport type { Constructor, ExceptionHandler, ExceptionMap } from \"./types.js\";\n\nexport interface HandlerOptions\n{\n    rethrowHandled: boolean;\n}\n\nexport class HandlerBuilder<T = never, D = void>\n{\n    public static get DefaultOpts(): HandlerOptions\n    {\n        return { rethrowHandled: false };\n    }\n\n    protected readonly _options: HandlerOptions;\n    protected readonly _map: ExceptionMap<any, any>[];\n\n    protected _default: ExceptionHandler<unknown, any>;\n    protected _set: boolean;\n\n    public constructor(options: Partial<HandlerOptions> = { })\n    {\n        this._options = { ...HandlerBuilder.DefaultOpts, ...options };\n        this._map = [];\n\n        this._default = (exc: unknown) => { throw exc; };\n        this._set = false;\n    }\n\n    protected _add<E>(type: Constructor<E>, handler: ExceptionHandler<E>): void\n    {\n        this._map.push({ type, handler });\n    }\n\n    public on<R, E extends Error>(errorType: Constructor<E>, errorHandler: ExceptionHandler<E, R>)\n        : HandlerBuilder<T | R, D>;\n    public on<R, E extends Constructor<Error>>(errorTypes: E[], errorHandler: ExceptionHandler<InstanceType<E>, R>)\n        : HandlerBuilder<T | R, D>;\n    public on<R, E extends Error>(\n        errorTypes: Constructor<E> | Constructor<E>[],\n        errorHandler: ExceptionHandler<E, R>\n    ): HandlerBuilder<T | R, D>\n    {\n        if (this._set)\n        {\n            throw new Exception(\"The default handler has already been set. \" +\n                                \"You cannot specify a new exception type to handle\" +\n                                \" after the default handler has been set.\");\n        }\n\n        if (Array.isArray(errorTypes))\n        {\n            errorTypes.forEach((errorType) => this._add(errorType, errorHandler));\n        }\n        else\n        {\n            this._add(errorTypes, errorHandler);\n        }\n\n        return this;\n    }\n\n    public otherwise<R>(errorHandler: ExceptionHandler<unknown, R>): HandlerBuilder<T, R>\n    {\n        if (this._set)\n        {\n            throw new Exception(\"The default handler has already been set. \" +\n                                \"You cannot specify more than one default handler.\");\n        }\n\n        this._default = errorHandler;\n        this._set = true;\n\n        return (this as unknown) as HandlerBuilder<T, R>;\n    }\n\n    public handle<E = unknown>(error: E): T | D | void\n    {\n        if ((this._options.rethrowHandled) && (this._map.length === 0))\n        {\n            // eslint-disable-next-line no-console\n            console.warn(\"Handling an exception this way is redundant\" +\n                         \" and causes some execution overhead.\\n\" +\n                         \"Did you maybe miss using the `on` method\" +\n                         \" to define the exception type to handle?\");\n\n            return this._default(error);\n        }\n        else if (error instanceof HandledException)\n        {\n            // eslint-disable-next-line no-console\n            return console.warn(error);\n        }\n\n        for (const { type, handler } of this._map)\n        {\n            if (error instanceof type)\n            {\n                return handler(error);\n            }\n        }\n\n        return this._default(error);\n    }\n}\n", "export { Exception, HandledException } from \"./exceptions/index.js\";\nexport { HandlerBuilder } from \"./models.js\";\n\nexport const VERSION = \"2.0.0-rc.3\";\n\nexport type { HandlerOptions } from \"./models.js\";\nexport type { ExceptionHandler } from \"./types.js\";\n"],
  "mappings": ";;;;AAAO,IAAMA,IAAN,cAAwB,MAC/B;EACI,OAAc,YAAYC,GAC1B;AACI,QAAIA,aAAiBD;AAEV,aAAAC;AAGL,UAAAC,IAAM,IAAIF,EAAU,EAAE;AAE5B,WAAIC,aAAiB,SAEjBC,EAAI,UAAUD,EAAM,SACpBC,EAAI,QAAQD,EAAM,OAClBC,EAAI,OAAOD,EAAM,QAIbC,EAAA,UAAU,OAAOD,CAAK,GAGvBC;EACX;EAEO,YAAYC,GAAiBC,GAAiBC,IAAO,aAC5D;AACI,UAAMF,CAAO,GAEb,KAAK,OAAOE,GAERD,MAEIA,aAAiB,QAEjB,KAAK,SAAS;;YAAiBA,EAAM,UAIrC,KAAK,SAAS;;YAAiBA;EAG3C;AACJ;ACxCO,IAAME,IAAN,cAA+BN,EACtC;EAGW,YAAYE,GAAgBG,IAAO,oBAC1C;AACI,UAAM,kDAAkD;AAJ5CE,MAAA,MAAA,SAAA;AAMZ,SAAK,OAAOF,GACZ,KAAK,SAAS;;UAAeH,EAAI,SAEjC,KAAK,UAAUA;EACnB;AACJ;ACNO,IAAMM,IAAN,MACP;EAYW,YAAYC,IAAmC,CAAA,GACtD;AAPmBF,MAAA,MAAA,UAAA;AACAA,MAAA,MAAA,MAAA;AAETA,MAAA,MAAA,UAAA;AACAA,MAAA,MAAA,MAAA;AAIN,SAAK,WAAW,EAAE,GAAGC,EAAe,aAAa,GAAGC,EAAAA,GACpD,KAAK,OAAO,CAAA,GAEP,KAAA,WAAW,CAACP,MAAiB;AAAQ,YAAAA;IAAA,GAC1C,KAAK,OAAO;EAChB;EAlBA,WAAkB,cAClB;AACW,WAAA,EAAE,gBAAgB,MAAA;EAC7B;EAiBU,KAAQQ,GAAsBC,GACxC;AACI,SAAK,KAAK,KAAK,EAAE,MAAAD,GAAM,SAAAC,EAAS,CAAA;EACpC;EAMO,GACHC,GACAC,GAEJ;AACI,QAAI,KAAK;AAEC,YAAA,IAAIb,EAAU,qIAE0C;AAG9D,WAAA,MAAM,QAAQY,CAAU,IAExBA,EAAW,QAAQ,CAACE,MAAc,KAAK,KAAKA,GAAWD,CAAY,CAAC,IAI/D,KAAA,KAAKD,GAAYC,CAAY,GAG/B;EACX;EAEO,UAAaA,GACpB;AACI,QAAI,KAAK;AAEC,YAAA,IAAIb,EAAU,6FACmD;AAG3E,WAAA,KAAK,WAAWa,GAChB,KAAK,OAAO,MAEJ;EACZ;EAEO,OAAoBZ,GAC3B;AACI,QAAK,KAAK,SAAS,kBAAoB,KAAK,KAAK,WAAW;AAGxD,aAAA,QAAQ,KAAK,mKAG0C,GAEhD,KAAK,SAASA,CAAK;AAC9B,QACSA,aAAiBK;AAGf,aAAA,QAAQ,KAAKL,CAAK;AAG7B,eAAW,EAAE,MAAAS,GAAM,SAAAC,EAAQ,KAAK,KAAK;AAEjC,UAAIV,aAAiBS;AAEjB,eAAOC,EAAQV,CAAK;AAIrB,WAAA,KAAK,SAASA,CAAK;EAC9B;AACJ;ACxGO,IAAMc,IAAU;",
  "names": ["Exception", "error", "exc", "message", "cause", "name", "HandledException", "__publicField", "HandlerBuilder", "options", "type", "handler", "errorTypes", "errorHandler", "errorType", "VERSION"]
}
